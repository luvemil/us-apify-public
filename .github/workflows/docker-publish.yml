name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
#   schedule:
#     - cron: '39 21 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            # type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=latest,enable=true

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          # Don't push the image to ghcr, just build it and then push it to ECR
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push to ECR
        uses: jwalton/gh-ecr-push@v1
        with:
          region: ${{ secrets.AWS_REGION }}
          access-key-id: ${{ secrets.AWS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          image: ${{ secrets.AWS_ECR_IMAGE }}:latest
          local-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Trigger terraform run
        run: |
          export TF_TOKEN=${{ secrets.TF_TOKEN }}
          export WORKSPACE=${{ secrets.TF_WORKSPACE }}
          export MESSAGE="[GitHub Actions] trigger run after lambda update"

          $GITHUB_WORKSPACE/.github/terraform_run.sh $GITHUB_WORKSPACE/.github/payload.json
